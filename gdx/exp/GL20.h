/*******************************************************************************
* Copyright 2011 See AUTHORS file.
* 
* Licensed under the Apache License, Version 2.0(the "License") = 0;
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*   http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/

/** Interface wrapping all the methods of OpenGL ES 2.0*/

#pragma once

#include "GLCommon.h"

class GL20 : virtual public GLCommon 
{
public:
	enum
	{
		GDX_GL_ES_VERSION_2_0 = 1,
		GDX_GL_DEPTH_BUFFER_BIT = 0x00000100,
		GDX_GL_STENCIL_BUFFER_BIT = 0x00000400,
		GDX_GL_COLOR_BUFFER_BIT = 0x00004000,
		GDX_GL_FALSE = 0,
		GDX_GL_TRUE = 1,
		GDX_GL_POINTS = 0x0000,
		GDX_GL_LINES = 0x0001,
		GDX_GL_LINE_LOOP = 0x0002,
		GDX_GL_LINE_STRIP = 0x0003,
		GDX_GL_TRIANGLES = 0x0004,
		GDX_GL_TRIANGLE_STRIP = 0x0005,
		GDX_GL_TRIANGLE_FAN = 0x0006,
		GDX_GL_ZERO = 0,
		GDX_GL_ONE = 1,
		GDX_GL_SRC_COLOR = 0x0300,
		GDX_GL_ONE_MINUS_SRC_COLOR = 0x0301,
		GDX_GL_SRC_ALPHA = 0x0302,
		GDX_GL_ONE_MINUS_SRC_ALPHA = 0x0303,
		GDX_GL_DST_ALPHA = 0x0304,
		GDX_GL_ONE_MINUS_DST_ALPHA = 0x0305,
		GDX_GL_DST_COLOR = 0x0306,
		GDX_GL_ONE_MINUS_DST_COLOR = 0x0307,
		GDX_GL_SRC_ALPHA_SATURATE = 0x0308,
		GDX_GL_FUNC_ADD = 0x8006,
		GDX_GL_BLEND_EQUATION = 0x8009,
		GDX_GL_BLEND_EQUATION_RGB = 0x8009,
		GDX_GL_BLEND_EQUATION_ALPHA = 0x883D,
		GDX_GL_FUNC_SUBTRACT = 0x800A,
		GDX_GL_FUNC_REVERSE_SUBTRACT = 0x800B,
		GDX_GL_BLEND_DST_RGB = 0x80C8,
		GDX_GL_BLEND_SRC_RGB = 0x80C9,
		GDX_GL_BLEND_DST_ALPHA = 0x80CA,
		GDX_GL_BLEND_SRC_ALPHA = 0x80CB,
		GDX_GL_CONSTANT_COLOR = 0x8001,
		GDX_GL_ONE_MINUS_CONSTANT_COLOR = 0x8002,
		GDX_GL_CONSTANT_ALPHA = 0x8003,
		GDX_GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004,
		GDX_GL_BLEND_COLOR = 0x8005,
		GDX_GL_ARRAY_BUFFER = 0x8892,
		GDX_GL_ELEMENT_ARRAY_BUFFER = 0x8893,
		GDX_GL_ARRAY_BUFFER_BINDING = 0x8894,
		GDX_GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,
		GDX_GL_STREAM_DRAW = 0x88E0,
		GDX_GL_STATIC_DRAW = 0x88E4,
		GDX_GL_DYNAMIC_DRAW = 0x88E8,
		GDX_GL_BUFFER_SIZE = 0x8764,
		GDX_GL_BUFFER_USAGE = 0x8765,
		GDX_GL_CURRENT_VERTEX_ATTRIB = 0x8626,
		GDX_GL_FRONT = 0x0404,
		GDX_GL_BACK = 0x0405,
		GDX_GL_FRONT_AND_BACK = 0x0408,
		GDX_GL_TEXTURE_2D = 0x0DE1,
		GDX_GL_CULL_FACE = 0x0B44,
		GDX_GL_BLEND = 0x0BE2,
		GDX_GL_DITHER = 0x0BD0,
		GDX_GL_STENCIL_TEST = 0x0B90,
		GDX_GL_DEPTH_TEST = 0x0B71,
		GDX_GL_SCISSOR_TEST = 0x0C11,
		GDX_GL_POLYGON_OFFSET_FILL = 0x8037,
		GDX_GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E,
		GDX_GL_SAMPLE_COVERAGE = 0x80A0,
		GDX_GL_NO_ERROR = 0,
		GDX_GL_INVALID_ENUM = 0x0500,
		GDX_GL_INVALID_VALUE = 0x0501,
		GDX_GL_INVALID_OPERATION = 0x0502,
		GDX_GL_OUT_OF_MEMORY = 0x0505,
		GDX_GL_CW = 0x0900,
		GDX_GL_CCW = 0x0901,
		GDX_GL_LINE_WIDTH = 0x0B21,
		GDX_GL_ALIASED_POINT_SIZE_RANGE = 0x846D,
		GDX_GL_ALIASED_LINE_WIDTH_RANGE = 0x846E,
		GDX_GL_CULL_FACE_MODE = 0x0B45,
		GDX_GL_FRONT_FACE = 0x0B46,
		GDX_GL_DEPTH_RANGE = 0x0B70,
		GDX_GL_DEPTH_WRITEMASK = 0x0B72,
		GDX_GL_DEPTH_CLEAR_VALUE = 0x0B73,
		GDX_GL_DEPTH_FUNC = 0x0B74,
		GDX_GL_STENCIL_CLEAR_VALUE = 0x0B91,
		GDX_GL_STENCIL_FUNC = 0x0B92,
		GDX_GL_STENCIL_FAIL = 0x0B94,
		GDX_GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95,
		GDX_GL_STENCIL_PASS_DEPTH_PASS = 0x0B96,
		GDX_GL_STENCIL_REF = 0x0B97,
		GDX_GL_STENCIL_VALUE_MASK = 0x0B93,
		GDX_GL_STENCIL_WRITEMASK = 0x0B98,
		GDX_GL_STENCIL_BACK_FUNC = 0x8800,
		GDX_GL_STENCIL_BACK_FAIL = 0x8801,
		GDX_GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,
		GDX_GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,
		GDX_GL_STENCIL_BACK_REF = 0x8CA3,
		GDX_GL_STENCIL_BACK_VALUE_MASK = 0x8CA4,
		GDX_GL_STENCIL_BACK_WRITEMASK = 0x8CA5,
		GDX_GL_VIEWPORT = 0x0BA2,
		GDX_GL_SCISSOR_BOX = 0x0C10,
		GDX_GL_COLOR_CLEAR_VALUE = 0x0C22,
		GDX_GL_COLOR_WRITEMASK = 0x0C23,
		GDX_GL_UNPACK_ALIGNMENT = 0x0CF5,
		GDX_GL_PACK_ALIGNMENT = 0x0D05,
		GDX_GL_MAX_TEXTURE_SIZE = 0x0D33,
		GDX_GL_MAX_TEXTURE_UNITS = 0x84E2,
		GDX_GL_MAX_VIEWPORT_DIMS = 0x0D3A,
		GDX_GL_SUBPIXEL_BITS = 0x0D50,
		GDX_GL_RED_BITS = 0x0D52,
		GDX_GL_GREEN_BITS = 0x0D53,
		GDX_GL_BLUE_BITS = 0x0D54,
		GDX_GL_ALPHA_BITS = 0x0D55,
		GDX_GL_DEPTH_BITS = 0x0D56,
		GDX_GL_STENCIL_BITS = 0x0D57,
		GDX_GL_POLYGON_OFFSET_UNITS = 0x2A00,
		GDX_GL_POLYGON_OFFSET_FACTOR = 0x8038,
		GDX_GL_TEXTURE_BINDING_2D = 0x8069,
		GDX_GL_SAMPLE_BUFFERS = 0x80A8,
		GDX_GL_SAMPLES = 0x80A9,
		GDX_GL_SAMPLE_COVERAGE_VALUE = 0x80AA,
		GDX_GL_SAMPLE_COVERAGE_INVERT = 0x80AB,
		GDX_GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
		GDX_GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3,
		GDX_GL_DONT_CARE = 0x1100,
		GDX_GL_FASTEST = 0x1101,
		GDX_GL_NICEST = 0x1102,
		GDX_GL_GENERATE_MIPMAP_HINT = 0x8192,
		GDX_GL_BYTE = 0x1400,
		GDX_GL_UNSIGNED_BYTE = 0x1401,
		GDX_GL_SHORT = 0x1402,
		GDX_GL_UNSIGNED_SHORT = 0x1403,
		GDX_GL_INT = 0x1404,
		GDX_GL_UNSIGNED_INT = 0x1405,
		GDX_GL_FLOAT = 0x1406,
		GDX_GL_FIXED = 0x140C,
		GDX_GL_DEPTH_COMPONENT = 0x1902,
		GDX_GL_ALPHA = 0x1906,
		GDX_GL_RGB = 0x1907,
		GDX_GL_RGBA = 0x1908,
		GDX_GL_LUMINANCE = 0x1909,
		GDX_GL_LUMINANCE_ALPHA = 0x190A,
		GDX_GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033,
		GDX_GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034,
		GDX_GL_UNSIGNED_SHORT_5_6_5 = 0x8363,
		GDX_GL_FRAGMENT_SHADER = 0x8B30,
		GDX_GL_VERTEX_SHADER = 0x8B31,
		GDX_GL_MAX_VERTEX_ATTRIBS = 0x8869,
		GDX_GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB,
		GDX_GL_MAX_VARYING_VECTORS = 0x8DFC,
		GDX_GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
		GDX_GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
		GDX_GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872,
		GDX_GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD,
		GDX_GL_SHADER_TYPE = 0x8B4F,
		GDX_GL_DELETE_STATUS = 0x8B80,
		GDX_GL_LINK_STATUS = 0x8B82,
		GDX_GL_VALIDATE_STATUS = 0x8B83,
		GDX_GL_ATTACHED_SHADERS = 0x8B85,
		GDX_GL_ACTIVE_UNIFORMS = 0x8B86,
		GDX_GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87,
		GDX_GL_ACTIVE_ATTRIBUTES = 0x8B89,
		GDX_GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A,
		GDX_GL_SHADING_LANGUAGE_VERSION = 0x8B8C,
		GDX_GL_CURRENT_PROGRAM = 0x8B8D,
		GDX_GL_NEVER = 0x0200,
		GDX_GL_LESS = 0x0201,
		GDX_GL_EQUAL = 0x0202,
		GDX_GL_LEQUAL = 0x0203,
		GDX_GL_GREATER = 0x0204,
		GDX_GL_NOTEQUAL = 0x0205,
		GDX_GL_GEQUAL = 0x0206,
		GDX_GL_ALWAYS = 0x0207,
		GDX_GL_KEEP = 0x1E00,
		GDX_GL_REPLACE = 0x1E01,
		GDX_GL_INCR = 0x1E02,
		GDX_GL_DECR = 0x1E03,
		GDX_GL_INVERT = 0x150A,
		GDX_GL_INCR_WRAP = 0x8507,
		GDX_GL_DECR_WRAP = 0x8508,
		GDX_GL_VENDOR = 0x1F00,
		GDX_GL_RENDERER = 0x1F01,
		GDX_GL_VERSION = 0x1F02,
		GDX_GL_EXTENSIONS = 0x1F03,
		GDX_GL_NEAREST = 0x2600,
		GDX_GL_LINEAR = 0x2601,
		GDX_GL_NEAREST_MIPMAP_NEAREST = 0x2700,
		GDX_GL_LINEAR_MIPMAP_NEAREST = 0x2701,
		GDX_GL_NEAREST_MIPMAP_LINEAR = 0x2702,
		GDX_GL_LINEAR_MIPMAP_LINEAR = 0x2703,
		GDX_GL_TEXTURE_MAG_FILTER = 0x2800,
		GDX_GL_TEXTURE_MIN_FILTER = 0x2801,
		GDX_GL_TEXTURE_WRAP_S = 0x2802,
		GDX_GL_TEXTURE_WRAP_T = 0x2803,
		GDX_GL_TEXTURE = 0x1702,
		GDX_GL_TEXTURE_CUBE_MAP = 0x8513,
		GDX_GL_TEXTURE_BINDING_CUBE_MAP = 0x8514,
		GDX_GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,
		GDX_GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,
		GDX_GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,
		GDX_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,
		GDX_GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,
		GDX_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,
		GDX_GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
		GDX_GL_TEXTURE0 = 0x84C0,
		GDX_GL_TEXTURE1 = 0x84C1,
		GDX_GL_TEXTURE2 = 0x84C2,
		GDX_GL_TEXTURE3 = 0x84C3,
		GDX_GL_TEXTURE4 = 0x84C4,
		GDX_GL_TEXTURE5 = 0x84C5,
		GDX_GL_TEXTURE6 = 0x84C6,
		GDX_GL_TEXTURE7 = 0x84C7,
		GDX_GL_TEXTURE8 = 0x84C8,
		GDX_GL_TEXTURE9 = 0x84C9,
		GDX_GL_TEXTURE10 = 0x84CA,
		GDX_GL_TEXTURE11 = 0x84CB,
		GDX_GL_TEXTURE12 = 0x84CC,
		GDX_GL_TEXTURE13 = 0x84CD,
		GDX_GL_TEXTURE14 = 0x84CE,
		GDX_GL_TEXTURE15 = 0x84CF,
		GDX_GL_TEXTURE16 = 0x84D0,
		GDX_GL_TEXTURE17 = 0x84D1,
		GDX_GL_TEXTURE18 = 0x84D2,
		GDX_GL_TEXTURE19 = 0x84D3,
		GDX_GL_TEXTURE20 = 0x84D4,
		GDX_GL_TEXTURE21 = 0x84D5,
		GDX_GL_TEXTURE22 = 0x84D6,
		GDX_GL_TEXTURE23 = 0x84D7,
		GDX_GL_TEXTURE24 = 0x84D8,
		GDX_GL_TEXTURE25 = 0x84D9,
		GDX_GL_TEXTURE26 = 0x84DA,
		GDX_GL_TEXTURE27 = 0x84DB,
		GDX_GL_TEXTURE28 = 0x84DC,
		GDX_GL_TEXTURE29 = 0x84DD,
		GDX_GL_TEXTURE30 = 0x84DE,
		GDX_GL_TEXTURE31 = 0x84DF,
		GDX_GL_ACTIVE_TEXTURE = 0x84E0,
		GDX_GL_REPEAT = 0x2901,
		GDX_GL_CLAMP_TO_EDGE = 0x812F,
		GDX_GL_MIRRORED_REPEAT = 0x8370,
		GDX_GL_FLOAT_VEC2 = 0x8B50,
		GDX_GL_FLOAT_VEC3 = 0x8B51,
		GDX_GL_FLOAT_VEC4 = 0x8B52,
		GDX_GL_INT_VEC2 = 0x8B53,
		GDX_GL_INT_VEC3 = 0x8B54,
		GDX_GL_INT_VEC4 = 0x8B55,
		GDX_GL_BOOL = 0x8B56,
		GDX_GL_BOOL_VEC2 = 0x8B57,
		GDX_GL_BOOL_VEC3 = 0x8B58,
		GDX_GL_BOOL_VEC4 = 0x8B59,
		GDX_GL_FLOAT_MAT2 = 0x8B5A,
		GDX_GL_FLOAT_MAT3 = 0x8B5B,
		GDX_GL_FLOAT_MAT4 = 0x8B5C,
		GDX_GL_SAMPLER_2D = 0x8B5E,
		GDX_GL_SAMPLER_CUBE = 0x8B60,
		GDX_GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
		GDX_GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,
		GDX_GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,
		GDX_GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,
		GDX_GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
		GDX_GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,
		GDX_GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
		GDX_GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
		GDX_GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
		GDX_GL_COMPILE_STATUS = 0x8B81,
		GDX_GL_INFO_LOG_LENGTH = 0x8B84,
		GDX_GL_SHADER_SOURCE_LENGTH = 0x8B88,
		GDX_GL_SHADER_COMPILER = 0x8DFA,
		GDX_GL_SHADER_BINARY_FORMATS = 0x8DF8,
		GDX_GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9,
		GDX_GL_LOW_FLOAT = 0x8DF0,
		GDX_GL_MEDIUM_FLOAT = 0x8DF1,
		GDX_GL_HIGH_FLOAT = 0x8DF2,
		GDX_GL_LOW_INT = 0x8DF3,
		GDX_GL_MEDIUM_INT = 0x8DF4,
		GDX_GL_HIGH_INT = 0x8DF5,
		GDX_GL_FRAMEBUFFER = 0x8D40,
		GDX_GL_RENDERBUFFER = 0x8D41,
		GDX_GL_RGBA4 = 0x8056,
		GDX_GL_RGB5_A1 = 0x8057,
		GDX_GL_RGB565 = 0x8D62,
		GDX_GL_DEPTH_COMPONENT16 = 0x81A5,
		GDX_GL_STENCIL_INDEX = 0x1901,
		GDX_GL_STENCIL_INDEX8 = 0x8D48,
		GDX_GL_RENDERBUFFER_WIDTH = 0x8D42,
		GDX_GL_RENDERBUFFER_HEIGHT = 0x8D43,
		GDX_GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44,
		GDX_GL_RENDERBUFFER_RED_SIZE = 0x8D50,
		GDX_GL_RENDERBUFFER_GREEN_SIZE = 0x8D51,
		GDX_GL_RENDERBUFFER_BLUE_SIZE = 0x8D52,
		GDX_GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53,
		GDX_GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54,
		GDX_GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55,
		GDX_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
		GDX_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,
		GDX_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,
		GDX_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,
		GDX_GL_COLOR_ATTACHMENT0 = 0x8CE0,
		GDX_GL_DEPTH_ATTACHMENT = 0x8D00,
		GDX_GL_STENCIL_ATTACHMENT = 0x8D20,
		GDX_GL_NONE = 0,
		GDX_GL_FRAMEBUFFER_COMPLETE = 0x8CD5,
		GDX_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,
		GDX_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,
		GDX_GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9,
		GDX_GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD,
		GDX_GL_FRAMEBUFFER_BINDING = 0x8CA6,
		GDX_GL_RENDERBUFFER_BINDING = 0x8CA7,
		GDX_GL_MAX_RENDERBUFFER_SIZE = 0x84E8,
		GDX_GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506,
		GDX_GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642,
		GDX_GL_COVERAGE_BUFFER_BIT_NV = 0x8000
	};
	virtual ~GL20() {};
	virtual void glAttachShader(int program, int shader) = 0;
	virtual void glBindAttribLocation(int program, int index, const std::wstring& name) = 0;
	virtual void glBindBuffer(int target, int buffer) = 0;
	virtual void glBindFramebuffer(int target, int framebuffer) = 0;
	virtual void glBindRenderbuffer(int target, int renderbuffer) = 0;
	virtual void glBlendColor(float red, float green, float blue, float alpha) = 0;
	virtual void glBlendEquation(int mode) = 0;
	virtual void glBlendEquationSeparate(int modeRGB, int modeAlpha) = 0;
	virtual void glBlendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) = 0;
	virtual void glBufferData(int target, int size, const void* data, int usage) = 0;
	virtual void glBufferSubData(int target, int offset, int size, const void* data) = 0;
	virtual int glCheckFramebufferStatus(int target) = 0;
	virtual void glCompileShader(int shader) = 0;
	virtual int glCreateProgram() = 0;
	virtual int glCreateShader(int type) = 0;
	virtual void glDeleteBuffers(int n, unsigned int* buffers) = 0;
	virtual void glDeleteFramebuffers(int n, unsigned int* framebuffers) = 0;
	virtual void glDeleteProgram(int program) = 0;
	virtual void glDeleteRenderbuffers(int n, unsigned int* renderbuffers) = 0;
	virtual void glDeleteShader(int shader) = 0;
	virtual void glDetachShader(int program, int shader) = 0;
	virtual void glDisableVertexAttribArray(int index) = 0;
	virtual void glDrawElements(int mode, int count, int type, /*TODO: void*??? */int indices) = 0;
	virtual void glEnableVertexAttribArray(int index) = 0;
	virtual void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, int renderbuffer) = 0;
	virtual void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level) = 0;
	virtual void glGenBuffers(int n, unsigned int* buffers) = 0;
	virtual void glGenerateMipmap(int target) = 0;
	virtual void glGenFramebuffers(int n, unsigned int* framebuffers) = 0;
	virtual void glGenRenderbuffers(int n, unsigned int* renderbuffers) = 0;
	virtual std::wstring glGetActiveAttrib(int program, int index, int* size, unsigned int* type) = 0;
	virtual std::wstring glGetActiveUniform(int program, int index, int* size, unsigned int* type) = 0;
	virtual void glGetAttachedShaders(int program, int maxcount, int* count, unsigned int* shaders) = 0;
	virtual int glGetAttribLocation(int program, const std::wstring& name) = 0;
	virtual void glGetBooleanv(int pname, bool* params) = 0;
	virtual void glGetBufferParameteriv(int target, int pname, int* params) = 0;
	virtual void glGetFloatv(int pname, float* params) = 0;
	virtual void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int* params) = 0;
	virtual void glGetProgramiv(int program, int pname, int* params) = 0;
	virtual std::wstring glGetProgramInfoLog(int program) = 0;
	virtual void glGetRenderbufferParameteriv(int target, int pname, int* params) = 0;
	virtual void glGetShaderiv(int shader, int pname, int* params) = 0;
	virtual std::wstring glGetShaderInfoLog(int shader) = 0;
	virtual void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int* range, int* precision) = 0;
	virtual std::wstring glGetShaderSource(int shader) = 0;
	virtual void glGetTexParameterfv(int target, int pname, float* params) = 0;
	virtual void glGetTexParameteriv(int target, int pname, int* params) = 0;
	virtual void glGetUniformfv(int program, int location, float* params) = 0;
	virtual void glGetUniformiv(int program, int location, int* params) = 0;
	virtual int glGetUniformLocation(int program, const std::wstring& name) = 0;
	virtual void glGetVertexAttribfv(int index, int pname, float* params) = 0;
	virtual void glGetVertexAttribiv(int index, int pname, int* params) = 0;
	virtual void glGetVertexAttribPointerv(int index, int pname, void** pointer) = 0;
	virtual bool glIsBuffer(int buffer) = 0;
	virtual bool glIsEnabled(int cap) = 0;
	virtual bool glIsFramebuffer(int framebuffer) = 0;
	virtual bool glIsProgram(int program) = 0;
	virtual bool glIsRenderbuffer(int renderbuffer) = 0;
	virtual bool glIsShader(int shader) = 0;
	virtual bool glIsTexture(int texture) = 0;
	virtual void glLinkProgram(int program) = 0;
	virtual void glReleaseShaderCompiler() = 0;
	virtual void glRenderbufferStorage(int target, int internalformat, int width, int height) = 0;
	virtual void glSampleCoverage(float value, bool invert) = 0;
	virtual void glShaderBinary(int n, const unsigned int* shaders, int binaryformat, const void* binary, int length) = 0;
	//TODO need multiple sources??:
	virtual void glShaderSource(int shader, const std::wstring& sources) = 0;
	virtual void glStencilFuncSeparate(int face, int func, int ref, int mask) = 0;
	virtual void glStencilMaskSeparate(int face, int mask) = 0;
	virtual void glStencilOpSeparate(int face, int fail, int zfail, int zpass) = 0;
	virtual void glTexParameterfv(int target, int pname, const float* params) = 0;
	virtual void glTexParameteri(int target, int pname, int param) = 0;
	virtual void glTexParameteriv(int target, int pname, const int* params) = 0;
	virtual void glUniform1f(int location, float x) = 0;
	virtual void glUniform1fv(int location, int count, const float* v) = 0;
	virtual void glUniform1i(int location, int x) = 0;
	virtual void glUniform1iv(int location, int count, const int* v) = 0;
	virtual void glUniform2f(int location, float x, float y) = 0;
	virtual void glUniform2fv(int location, int count, const float* v) = 0;
	virtual void glUniform2i(int location, int x, int y) = 0;
	virtual void glUniform2iv(int location, int count, const int* v) = 0;
	virtual void glUniform3f(int location, float x, float y, float z) = 0;
	virtual void glUniform3fv(int location, int count, const float* v) = 0;
	virtual void glUniform3i(int location, int x, int y, int z) = 0;
	virtual void glUniform3iv(int location, int count, const int* v) = 0;
	virtual void glUniform4f(int location, float x, float y, float z, float w) = 0;
	virtual void glUniform4fv(int location, int count, const float* v) = 0;
	virtual void glUniform4i(int location, int x, int y, int z, int w) = 0;
	virtual void glUniform4iv(int location, int count, const int* v) = 0;
	virtual void glUniformMatrix2fv(int location, int count, bool transpose, const float* value) = 0;
	virtual void glUniformMatrix3fv(int location, int count, bool transpose, const float* value) = 0;
	virtual void glUniformMatrix4fv(int location, int count, bool transpose, const float* value) = 0;
	virtual void glUseProgram(int program) = 0;
	virtual void glValidateProgram(int program) = 0;
	virtual void glVertexAttrib1f(int indx, float x) = 0;
	virtual void glVertexAttrib1fv(int indx, const float* values) = 0;
	virtual void glVertexAttrib2f(int indx, float x, float y) = 0;
	virtual void glVertexAttrib2fv(int indx, const float* values) = 0;
	virtual void glVertexAttrib3f(int indx, float x, float y, float z) = 0;
	virtual void glVertexAttrib3fv(int indx, const float* values) = 0;
	virtual void glVertexAttrib4f(int indx, float x, float y, float z, float w) = 0;
	virtual void glVertexAttrib4fv(int indx, const float* values) = 0;
	virtual void glVertexAttribPointer(int indx, int size, int type, bool normalized, int stride, const void* ptr) = 0;
	virtual void glVertexAttribPointer(int indx, int size, int type, bool normalized, int stride, int ptr) = 0;
};
